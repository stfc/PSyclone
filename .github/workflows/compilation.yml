# -----------------------------------------------------------------------------
# BSD 3-Clause License
#
# Copyright (c) 2020-2023, Science and Technology Facilities Council.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
# Author A. R. Porter, STFC Daresbury Lab
# Modified by R. W. Ford, STFC Daresbury Lab
# Modified by A. J. Voysey, Met Office
# Modified by J. Henrichs, Bureau of Meteorology
# Modified by N. M. Nobre, STFC Daresbury Lab

# This workflow will use a self-hosted runner to perform the more expensive
# compilation tests that are not run on GHA systems. At the moment it:
#
#  * Runs the test suite with compilation with gfortran and nvfortran;
#  * Builds the examples with gfortran and nvfortran (the latter with
#    OpenACC enabled).
#  * Builds the tutorials with gfortran and nvfortran.

name: Compilation tests

on:
  push

env:
  PYTHON_VERSION: 3.11.4
  GFORTRAN_VERSION: 13.2.0
  NVFORTRAN_VERSION: 23.7
  CUDA_VERSION: 12.2

jobs:
  run_if_on_mirror:
    # Only PSyclone-mirror has the necessary self-hosted runner.
    if: ${{ github.repository == 'stfc/PSyclone-mirror' }}
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        # This is required to get the commit history for merge commits for
        # the ci-skip check below.
        fetch-depth: '0'
    - name: Check for [skip ci] in commit message
      uses: mstachniuk/ci-skip@v1
      with:
        # This setting causes the tests to 'fail' if [skip ci] is specified
        fail-fast: true
        commit-filter: '[skip ci]'
    - name: Install dependencies
      run: |
        module load python/${PYTHON_VERSION}
        python -m venv .runner_venv
        . .runner_venv/bin/activate
        python -m pip install --upgrade pip
        # If you wish to install the version of fparser pointed to by the
        # submodule instead of the released version (from PyPI) then
        # uncomment the following line:
        pip install external/fparser
        pip install .[test,psydata]
    - name: Unit tests with compilation - gfortran
      run: |
        module load python/${PYTHON_VERSION}
        . .runner_venv/bin/activate
        module load gcc/${GFORTRAN_VERSION} openmpi netcdf_fortran
        pytest -n 2 --f90=gfortran --compile --compileopencl src/psyclone/tests
        module rm netcdf_fortran gcc
    - name: Unit tests with compilation - nvfortran
      run: |
        module load python/${PYTHON_VERSION}
        . .runner_venv/bin/activate
        module load nvidia-hpcsdk/${NVFORTRAN_VERSION} netcdf_fortran
        # We have to tell nvfortran where to find the OpenCL library.
        pytest -n 2 --f90=nvfortran --f90flags="-L/apps/packages/compilers/nvidia-hpcsdk/Linux_x86_64/${NVFORTRAN_VERSION}/cuda/${CUDA_VERSION}/targets/x86_64-linux/lib" --compile --compileopencl src/psyclone/tests
        module rm netcdf_fortran nvidia-hpcsdk
    - name: Examples with compilation - gfortran
      run: |
        module load python/${PYTHON_VERSION}
        . .runner_venv/bin/activate
        module load gcc/${GFORTRAN_VERSION} openmpi netcdf_fortran
        # Although we're using gfortran, we link with the OpenCL lib that comes
        # with CUDA.
        make -C examples allclean
        F90=gfortran F90FLAGS="-L/apps/packages/compilers/nvidia-hpcsdk/Linux_x86_64/${NVFORTRAN_VERSION}/cuda/${CUDA_VERSION}/targets/x86_64-linux/lib" make -C examples compile
    - name: Tutorials with compilation - gfortran
      run: |
        module load python/${PYTHON_VERSION}
        . .runner_venv/bin/activate
        make -C tutorial/practicals allclean
        module load gcc/${GFORTRAN_VERSION} openmpi netcdf_fortran
        make -C tutorial/practicals compile
    - name: Examples with compilation - nvfortran
      run: |
        module load python/${PYTHON_VERSION}
        . .runner_venv/bin/activate
        make -C examples allclean
        module load nvidia-hpcsdk/${NVFORTRAN_VERSION} netcdf_fortran
        # We have to tell nvfortran where to find the OpenCL library.
        F90=nvfortran F90FLAGS="-acc -Minfo=all -L/apps/packages/compilers/nvidia-hpcsdk/Linux_x86_64/${NVFORTRAN_VERSION}/cuda/${CUDA_VERSION}/targets/x86_64-linux/lib" make -C examples compile
    - name: Tutorials with compilation - nvfortran
      run: |
        module load python/${PYTHON_VERSION}
        . .runner_venv/bin/activate
        make -C tutorial/practicals allclean
        module load nvidia-hpcsdk/${NVFORTRAN_VERSION} netcdf_fortran
        # TODO #2251. Cannot build the LFRic practicals with 23.5/7 of nvfortran
        # because the compilation of nan_test.f90 gives an ICE.
        F90=nvfortran F90FLAGS="-acc -Minfo=all" make -C tutorial/practicals/nemo compile
