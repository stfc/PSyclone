# -----------------------------------------------------------------------------
# BSD 3-Clause License
#
# Copyright (c) 2024-2025, Science and Technology Facilities Council.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
# Author S. Siso, STFC Daresbury Lab

# This workflow will use a self-hosted runner to perform the more expensive
# integrations tests that are not run on GHA systems.

name: NEMOv4 Integration Tests

on:
  push

jobs:
  run_if_on_mirror:
    if: ${{ github.repository == 'stfc/PSyclone-mirror' }}
    runs-on: self-hosted
    env:
      HDF5_VERSION: 1.14.5
      NETCDF_C_VERSION: 4.9.2
      NETCDF_FORTRAN_VERSION: 4.6.1
      NVFORTRAN_VERSION: 25.5
      ONEAPI_VERSION: 2024.2.1
      PERL_VERSION: 5.40.2
      PYTHON_VERSION: 3.13.3

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        # This is required to get the commit history for merge commits for
        # the ci-skip check below.
        fetch-depth: '0'
    - name: Check for [skip ci] in commit message
      uses: mstachniuk/ci-skip@v1
      with:
        # This setting causes the tests to 'fail' if [skip ci] is specified
        fail-fast: true
        commit-filter: '[skip ci]'
    - name: Install dependencies
      run: |
        module load python/${PYTHON_VERSION}
        python -m venv .runner_venv
        . .runner_venv/bin/activate
        python -m pip install --upgrade pip
        # Uncomment the below to use the submodule version of fparser rather
        # than the latest release from pypi.
        # pip install external/fparser
        pip install .[test]
        # Compile nvidia profiling tools
        module load nvidia-hpcsdk/${NVFORTRAN_VERSION}
        cd lib/profiling/nvidia/
        F90=nvfortran make

    # PSyclone passthrough for MetOffice NEMO
    - name: NEMO MetOffice Passthrough
      # Only bother doing passthrough if this is a re-run of a previous test.
      if: ${{ github.run_attempt != '1' }}
      run: |
        . .runner_venv/bin/activate
        export PSYCLONE_NEMO_DIR=${GITHUB_WORKSPACE}/examples/nemo/scripts
        export NEMO_DIR=${HOME}/NEMO
        cd $PSYCLONE_NEMO_DIR
        module load nvidia-hpcsdk/${NVFORTRAN_VERSION}
        module load hdf5/${HDF5_VERSION} netcdf_c/${NETCDF_C_VERSION} netcdf_fortran/${NETCDF_FORTRAN_VERSION}
        module load perl/${PERL_VERSION}
        make -j 4 passthrough
        make -j 4 compile-passthrough
        make run-passthrough
        # Check for full numerical reproducibility with KGO results
        diff <(make -s output-passthrough)  KGOs/run.stat.nemo4.splitz12.nvhpc.10steps

    # PSyclone, compile and run MetOffice NEMO with OpenMP for GPUs
    - name: NEMO MetOffice OpenMP for GPU
      run: |
        . .runner_venv/bin/activate
        export PSYCLONE_NEMO_DIR=${GITHUB_WORKSPACE}/examples/nemo/scripts
        export NEMO_DIR=${HOME}/NEMO
        cd $PSYCLONE_NEMO_DIR
        module load nvidia-hpcsdk/${NVFORTRAN_VERSION}
        module load hdf5/${HDF5_VERSION} netcdf_c/${NETCDF_C_VERSION} netcdf_fortran/${NETCDF_FORTRAN_VERSION}
        module load perl/${PERL_VERSION}
        make clean
        export NEMOV4=1  # Enables specific NEMOV4 exclusions in the PSyclone transformation script
        make -j 4 openmp_gpu
        make -j 4 compile-openmp_gpu
        export NV_ACC_POOL_THRESHOLD=75
        make run-openmp_gpu
        # Check for full numerical reproducibility with KGO results
        diff <(make -s output-openmp_gpu)  KGOs/run.stat.nemo4.splitz12.nvhpc.10steps
        export VAR_TIME=$(grep -A 1 "Elapsed Time" <(make -s time-openmp_gpu) | head -n 2 | tail -n 1 | awk '{print $1}')
        ${HOME}/mongosh-2.1.1-linux-x64/bin/mongosh \
          "mongodb+srv://cluster0.x8ncpxi.mongodb.net/PerformanceMonitoring" \
          --quiet --apiVersion 1 --username ${{ secrets.MONGODB_USERNAME }} \
          --password ${{ secrets.MONGODB_PASSWORD }} \
          --eval 'db.GitHub_CI.insertOne({branch_name: "'"$GITHUB_REF_NAME"'", commit: "'"$GITHUB_SHA"'",
          github_job: "'"$GITHUB_RUN_ID"'"-"'"$GITHUB_RUN_ATTEMPT"'",
          ci_test: "NEMOv4 OpenMP for GPU", nemo_version: "NEMO MO 4.0.2", system: "GlaDos",
          compiler:"nvhpc-'"$NVFORTRAN_VERSION"'", date: new Date(), elapsed_time: '"$VAR_TIME"'})'

    # PSyclone, compile and run MetOffice NEMO with OpenACC kernels for GPUs
    - name: NEMO MetOffice OpenACC kernels for GPU
      run: |
        . .runner_venv/bin/activate
        export PSYCLONE_NEMO_DIR=${GITHUB_WORKSPACE}/examples/nemo/scripts
        export NEMO_DIR=${HOME}/NEMO
        cd $PSYCLONE_NEMO_DIR
        module load nvidia-hpcsdk/${NVFORTRAN_VERSION}
        module load hdf5/${HDF5_VERSION} netcdf_c/${NETCDF_C_VERSION} netcdf_fortran/${NETCDF_FORTRAN_VERSION}
        module load perl/${PERL_VERSION}
        make clean
        make -j 4 openacc_kernels
        COMPILER_ARCH=linux_nvidia_acc_gpu make -j 4 compile-openacc_kernels
        export NV_ACC_POOL_THRESHOLD=75
        make run-openacc_kernels
        # Check the output is as expected (TODO #2895: improve numerical reproducibility)
        make output-openacc_kernels | grep -q " it :      10"  || (echo "Error: 'it :      10' not found!" & false)
        make output-openacc_kernels | grep -q "|ssh|_max:  0.259483" || (echo "Error: '|ssh|_max:  0.259483' not found!" & false)
        make output-openacc_kernels | grep -q "|U|_max:  0.458515" || (echo "Error: '|U|_max:  0.458515' not found!" & false)
        make output-openacc_kernels | grep -q "S_min:  0.482686" || (echo "Error: 'S_min:  0.482686' not found!" & false)
        make output-openacc_kernels | grep -q "S_max:  0.407622" || (echo "Error: 'S_max:  0.407622' not found!" & false)
        export VAR_TIME=$(grep -A 1 "Elapsed Time" <(make -s time-openacc_kernels) | head -n 2 | tail -n 1 | awk '{print $1}')
        ${HOME}/mongosh-2.1.1-linux-x64/bin/mongosh \
          "mongodb+srv://cluster0.x8ncpxi.mongodb.net/PerformanceMonitoring" \
          --quiet --apiVersion 1 --username ${{ secrets.MONGODB_USERNAME }} \
          --password ${{ secrets.MONGODB_PASSWORD }} \
          --eval 'db.GitHub_CI.insertOne({branch_name: "'"$GITHUB_REF_NAME"'", commit: "'"$GITHUB_SHA"'",
          github_job: "'"$GITHUB_RUN_ID"'"-"'"$GITHUB_RUN_ATTEMPT"'",
          ci_test: "NEMOv4 OpenACC kernels for GPU", nemo_version: "MEMO MO 4.0.2", system: "GlaDos",
          compiler:"nvhpc-'"$NVFORTRAN_VERSION"'", date: new Date(), elapsed_time: '"$VAR_TIME"'})'

    # PSyclone, compile and run MetOffice NEMO with OpenACC loops for GPUs
    - name: NEMO MetOffice OpenACC loops for GPU
      run: |
        . .runner_venv/bin/activate
        export PSYCLONE_NEMO_DIR=${GITHUB_WORKSPACE}/examples/nemo/scripts
        export NEMO_DIR=${HOME}/NEMO
        cd $PSYCLONE_NEMO_DIR
        module load nvidia-hpcsdk/${NVFORTRAN_VERSION}
        module load hdf5/${HDF5_VERSION} netcdf_c/${NETCDF_C_VERSION} netcdf_fortran/${NETCDF_FORTRAN_VERSION}
        module load perl/${PERL_VERSION}
        make clean
        make -j 4 openacc_loops
        COMPILER_ARCH=linux_nvidia_acc_gpu make -j 4 compile-openacc_loops
        export NV_ACC_POOL_THRESHOLD=75
        make run-openacc_loops
        # Check the output is as expected (TODO #2895: improve numerical reproducibility)
        make output-openacc_loops | grep -q " it :      10"  || (echo "Error: 'it :      10' not found!" & false)
        make output-openacc_loops | grep -q "|ssh|_max:  0.259483" || (echo "Error: '|ssh|_max:  0.259483' not found!" & false)
        make output-openacc_loops | grep -q "|U|_max:  0.458515" || (echo "Error: '|U|_max:  0.458515' not found!" & false)
        make output-openacc_loops | grep -q "S_min:  0.482686" || (echo "Error: 'S_min:  0.482686' not found!" & false)
        make output-openacc_loops | grep -q "S_max:  0.407622" || (echo "Error: 'S_max:  0.407622' not found!" & false)
        export VAR_TIME=$(grep -A 1 "Elapsed Time" <(make -s time-openacc_loops) | head -n 2 | tail -n 1 | awk '{print $1}')
        ${HOME}/mongosh-2.1.1-linux-x64/bin/mongosh \
          "mongodb+srv://cluster0.x8ncpxi.mongodb.net/PerformanceMonitoring" \
          --quiet --apiVersion 1 --username ${{ secrets.MONGODB_USERNAME }} \
          --password ${{ secrets.MONGODB_PASSWORD }} \
          --eval 'db.GitHub_CI.insertOne({branch_name: "'"$GITHUB_REF_NAME"'", commit: "'"$GITHUB_SHA"'",
          github_job: "'"$GITHUB_RUN_ID"'"-"'"$GITHUB_RUN_ATTEMPT"'",
          ci_test: "NEMOv4 OpenACC loops for GPU", nemo_version: "MEMO MO 4.0.2", system: "GlaDos",
          compiler:"nvhpc-'"$NVFORTRAN_VERSION"'", date: new Date(), elapsed_time: '"$VAR_TIME"'})'
      
    # PSyclone, compile and run ECMWF NEMO with OpenMP for CPUs. This uses
    # the Intel compiler and does not disable MPI. Therefore we have to ensure
    # that we provide the path to the header files for Intel MPI.
    - name: NEMO ECMWF OpenMP for CPU
      run: |
        . .runner_venv/bin/activate
        module load oneapi/${ONEAPI_VERSION}
        module load hdf5/${HDF5_VERSION} netcdf_c/${NETCDF_C_VERSION} netcdf_fortran/${NETCDF_FORTRAN_VERSION}
        module load perl/${PERL_VERSION}
        export NEMOV4=1  # Enables specific NEMOV4 exclusions in the PSyclone transformation script
        export PSYCLONE_NEMO_DIR=${GITHUB_WORKSPACE}/examples/nemo/scripts
        export NEMO_DIR=${HOME}/NEMOGCM_V40
        export COMPILER_ARCH=linux_intel
        export ADD_KEYS="IEEE_IS_NAN=ieee_is_nan key_nosignedzero"
        export DEL_KEYS="key_iomput"
        export INPUT_DIR=/archive/NEMO_INPUTS/NEMOv4/ECMWF/eORCA1_GO8/
        export MPI_INC_DIR=${I_MPI_ROOT}/include
        cd $PSYCLONE_NEMO_DIR
        make clean
        make -j 4 openmp_cpu
        make -j 4 compile-openmp_cpu
        export OMP_NUM_THREADS=4
        make run-openmp_cpu
        # Check the output is as expected (TODO #2895: improve numerical reproducibility)
        make output-openmp_cpu | grep -q " it :      10" || (echo "Error: 'it :      10' not found!" & false)
        make output-openmp_cpu | grep -q "|ssh|_max:  0.199" || (echo "Error: '|ssh|_max:  0.199' not found!" & false)
        make output-openmp_cpu | grep -q "|U|_max:  0.148" || (echo "Error: '|U|_max:  0.148' not found!" & false)
        make output-openmp_cpu | grep -q "S_min:  0.10" || (echo "Error: 'S_min:  0.10' not found!" & false)
        make output-openmp_cpu | grep -q "S_max:  0.404" || (echo "Error: 'S_max:  0.404' not found!" & false)
        export VAR_TIME=$(grep -A 1 "Elapsed Time" <(make -s time-openmp_cpu) | head -n 2 | tail -n 1 | awk '{print $1}')
        ${HOME}/mongosh-2.1.1-linux-x64/bin/mongosh \
          "mongodb+srv://cluster0.x8ncpxi.mongodb.net/PerformanceMonitoring" \
          --quiet --apiVersion 1 --username ${{ secrets.MONGODB_USERNAME }} \
          --password ${{ secrets.MONGODB_PASSWORD }} \
          --eval 'db.GitHub_CI.insertOne({branch_name: "'"$GITHUB_REF_NAME"'", commit: "'"$GITHUB_SHA"'",
          github_job: "'"$GITHUB_RUN_ID"'"-"'"$GITHUB_RUN_ATTEMPT"'",
          ci_test: "NEMOv4 OpenMP for CPU", nemo_version: "NEMO ECMWF 4.0 V40 with mpp", system: "GlaDos",
          compiler:"intel-'"$ONEAPI_VERSION"'" , date: new Date(),
          num_omp_threads: '"$OMP_NUM_THREADS"', elapsed_time: '"$VAR_TIME"'})'
