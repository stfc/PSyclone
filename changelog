
	1) #245 and PR #247. Extend PSyIR to support common kernel
	constructs (e.g. asignments) and generalise ASTProcessor and
	CodeBlocks.

	2) #275 and PR #276. Update fparser submodule (to point to latest
	version) as this was not done at the last release.

	3) #269 and PR #273. Remove generation of unnecessary
	infrastructure calls when an Invoke only contains calls to
	built-ins.

	4) #196 and PR #242. Add support for kernels with evaluators on
	multiple target function spaces.

	5) #270 and PR #271. Add ability to specify include directories in
	PSyclone script to allow Fortran include files to be found when
	transforming kernels.

	6) #201 and PR #224. Add ability to write transformed kernels to
	file. Also ensures that kernel and psy-layer names match, allows
	an output directory to be specified and supports different output
	options when the same kernel is transformed in more than one
	location.

	7) #126 and PR #283. Update xfailing tests in alggen_test.py which
	require multiple quadrature objects in a single invoke to pass.

	8) #227 and PR #233. Add a gocean1.0 API OpenACC example.

	9) #207 and PR #280. Remove support for gunghoproto API.

	10) #174 and PR #216. Adds the ability to generate an OpenCL PSy
	layer in the gocean1.0 API (including an OpenCL transformation).

	11) #272 and PR #277. Adds an implicit-to-explicit-loop
	transformation for the nemo API.

	12) PR #255. Construct a KernelSchedule for kernel code with a
	SymbolTable to hold information on variables used.

	13) PR #302. Fix API's -> APIs typo in documentation.

	14) #292 and PR #293. Add allowed list of nodes to RegionTrans.

	15) #254 and PR #299. Adds methods to generate C and OpenCL
	code for the Symbol Table and for certain PSyIR nodes.

	16) PR #301. Adds an extras_require section to setup.py to simplify
	installation of dependencies required for docs and tests.

	17) #281 and PR #313. Adds support for compiling the code
	generated as part of the GOcean 1.0 tests (including OpenCL
	code that uses FortCL).

	18) #139 and PR #218. Beginning of implementation of kernel-
	extraction functionality (PSyKE). Currently only inserts
	comments into generated Fortran code.

        19) #327 and PR #328. Fix for erroneous xpassing test.

	20) #238 and PR #285. Use fparser2 for parsing the
	Algorithm layer (instead of fparser1).

	21) #321 and PR #325. Document kernel coding restrictions required
	for kernel transformations.

        22) #326 PR #335. Alters the use of pytest fixtures to remove the now
	deprecated use of the global pytest.config.

	23) PR #318. Updates the Schedule hierarchy within the PSyIR.
	Introduces a new Schedule base class which KernelSchedule and
	InvokeSchedule then sub-class.

	24) #332 and PR #333. Bug fix for parsing of simple arithmetic
	expressions in kernel argument lists in the Algorithm layer.

	25) #337 and PR #341. Bug fix to make matching of kernel names
	in module use statements (in the Algorithm) case insensitive.

	26) #268 and PR #306. Restructure of PSy and stub code generation.

	27) #248 and PR #287. Extends OpenACC transformation support to
	the nemo api, adds transformations for OpenACC data and kernel
	directives and adds a sequential option to the OpenACC loop
	directive transformation.

	28) #319 and PR #331. Bug fix to make matching of kernel names
	in module use statements (in the Kernel) case insensitive.

	29) #349 Bug fix for unicode characters in comment strings for
	Python 3 to 3.6.

	30) #320 and PR #334. Remove obsolete GUI-related code.

	31) #322 and PR #343. Add gocean1.0 api example which contains
	kernels with use statements.

        32) #345 and PR #352. Makes the search for kernels within the parse
        tree case insensitive.

        33) #350 and PR #351. Bug fix in the stencil lookup for field
        vectors in the Dynamo0.3 API.

	34) #336 and PR #338. PSyIR Fortran array parsing support (logical
	type, a(xx) dimension specifications and array size can be an
	integer variable).

	35) #346 and PR #357. In the nemo api put do-while loops into a
	code block rather than recognising them as do-loops and make
	default(present) optional for ACCKernels transformations.

        36) #362 and PR #367. Adds the basics of a transformation for identifying
	certain LFRic kernel arguments that can be converted to constants.
	Currently only identifies candidate arguments and prints them to
	stdout.

        37) PR #347 (working towards #256). Adds support for If and CASE
	constructs to the PSyIR (superseding and removing the existing, NEMO-
	specific support for If constructs).

	38) #377 and PR #378. Update fparser submodule to point to latest
	fparser master (contains bug fix for Python 2 installation).

        39) #329 and PR #371. Removes the global psyGen.MAPPINGS_ACCESSES by
	moving the functionality into the api-specifc config section of
	the configuration file.

	40) #361 and PR #365. Identify NemoKernel nodes via the PSyIR
	rather than the fparser2 parse tree.

	41) #340 and PR #380. Split the documentation into a user-guide
	and a developer-guide. These will be available separately on
	read-the-docs.

	42) #369 and PR #347. Adds support for constant values (fixed compile-time
	known values) in the PSyIR Symbol representation.

        43) PR #383. Fixes to various pylint errors.

        44) PR #384 (working towards #354) Adds support for CASE constructs with
        a DEFAULT clause when translating Fortran fparser2 to PSyIR.

        45) PR #366 (working towards #323) Improves the Symbol interface
        infrastructure with Arguments and FortranGlobals. The Fortran-to-PSyIR
        front-end parses the 'use module only' statements.

        46) PR #370 for #339. Makes the support for operators in the PSyIR
        more robust by using an enumerator. Adds support for some intrinsics.

        47) PR #389 for #386. Variable names and associated loop-types
	for the NEMO API are now stored in the configuration file.

        48) PR #394 for #392. Fixes a bug in the way the test suite checks
	for whether the graphviz package is available.

        49) PR #387 for #249. Extends OCLTrans() so that all kernels within a
	transformed Invoke are converted to OpenCL. Also includes a
	work-around for array accesses incorrectly identified as Statement
	Functions by fparser2.

        50) PR #403 for #390. Use AutoAPI to generate the PSyclone Reference Guide
        and build all local documentation using the 'sphinx_rtd_theme'.

        51) PR #404 for #364. Re-structure class hierarchy for Kernels, with
        CodedKernels and BuiltIns as specialisations.

        52) PR #297. Adds support for the Dr Hook profiling library.

        53) PR #413 for #411. Adds support for semantic navigation of the
        PSyIR tree.

        54) PR #376 for #368. Introduces PSyIR back-end infrastructure using the
        Visitor Pattern and creates a PSyIR-to-Fortran back-end.

        55) PR #428 for #427. Fix to test suite so that empty, transformed
        kernel files are not created in the CWD.

release 1.7.0 20th December 2018

	1) #172 and PR #173 Add support for logical declaration, the save
	attribute and initialisation in f2pygen (required for the OpenACC
	transformation)

        2) #137 Add support for Python 3. Travis now runs the test suite
	for both Python 2 and Python 3.

        3) #159 and PR #165. Adds a configuration option for the Dynamo
	0.3 API to turn on (redundant) computation over annexed dofs in
	order to reduce the number of halo exchanges required.

	4) #119 and PR #171. Adds support for inserting profiling/
	monitoring into a Schedule.

	5) #179 and PR #183. Bug fix in CompileError constructor to run
	tests under Python 3.

	6) #121 and PR #166. Adds a user editable configuration file.

	7) #181 and PR #182. Adds support for generating declarations of
	character variables and for the target attribute.

	8) #170 and PR #177. Adds OpenACC transformations for use with the
	GOcean1.0 API. Appropriate Kernel transformations need to be added
	for full automated OpenACC code parallelisation.

	9) #164 and PR #184. Updates documentation to refer to psyclone
	script instead of generator.py.

        10) PR #187. Add example transformation scripts for the Dynamo
        0.3 API.

	11) PR #180. Makes the specification of loop limits in the GOcean
	API more flexible. This will enable us to support single-iteration
	loops.

        12) #188 and PR #189. Bug fix to ensure that the name of profiling
        regions remains the same when gen() is called multiple times.

        13) #176 and PR #200. Introduce new RegionTrans base class and
	add _validate method to ensure that the list of nodes to
	be transformed (with OpenMP or OpenACC) is correct.

        14) #197. Tidying of the test suite to use the new, get_invoke()
	utility everywhere.

	15) #212 and PR #213. Adds fparser as a submodule of psyclone to
	allow concurrent development of PSyclone and fparser (by allowing
	development versions of PSyclone to point to development versions
	of fparser).

	16) #185 and PR #202. Adds ability to modify a kernel in PSyclone
	using fparser2 and includes an OpenACC transformation to specify a
	kernel is an OpenACC kernel by adding an appropriate
	directive. Currently it is not possible to write the modified
	kernel to file.

	17) #134 and PR #217. Add support for colouring intergrid kernels.

	18) #196 and PR #210. Adds metadata support for evaluators on
	multiple function spaces in the Dynamo 0.3 API.

	19) #191 and PR #215. Add ability to specify iteration space
	definitions to the configuration file.

	20) #228 and PR #232. Fix for examples and travis now checks
	examples at the same time as coverage and code style.

        21) #219 and PR #225. Refactor dependence analysis and fix bug
        that meant that unnecessary halo exchanges of vector components
        were not being removed (following a redundant computation
        transformation).

	22) #27 and PR #209. Created initial NEMO api. Needs lots of work
	but it provides a starting point.

        23) #214 and PR #221. Adds a transformation to convert a
        synchronous halo exchange into an asynchronous halo exchange.

	24) #235 and PR #243. Removes dependency on Habakkuk in NEMO API.

	25) #134 and PR #236. Adds support for adding OpenMP to intergrid
	kernels.

        26) #198 and PR #223. Updates PSyclone to use the latest
        version of dl_esm_inf which has "GO_" prefixed to all public
        quantities. Adds dl_esm_inf as a git submodule.

        27) #158 and PR #253. Fix to remove unnecessary halo exchanges
	related to GH_INC updates to kernel arguments.

	28) #317 and PR #330. Fix to allow module use statements to be
	added to functions.

	29) #330 and PR #422. Adds PSyIR node to represent Nary operators and
	increases the number of supported operators.

release 1.6.1 6th December 2018

  	1) #250. Change setup.py (used for pip installation) to only use
	version 0.0.7 of fparser.

release 1.6.0 18th May 2018

        1) #91 and PR #111 Remove unnecessary __init__.py files.

        2) PR #107 Fix errors in Fortran test files revealed by update
	to fparser 0.0.6. Update to catch new AnalyzeError raised by
        fparser.

        3) #90 and PR #102 Add support for integer, read-only, scalar
        arguments to built-in kernels. Add new inc_X_powint_n Built-in
        that raises a field to an integer power.

        4) #67 Bug fix - printing Invoke object caused crash.

        5) #112 and PR #113 - add travis support for codecov coverage tool

	6) #118 and PR #122 - add .pylintrc file in tests directory
	to disable some warnings that we don't care about (for testing
	code).

	7) #117 and PR #125 - bug fix for passing kernel arguments by value
	in the GOcean API.

	8) #105 and PR #115 - add support for coloured loops when
	performing redundant computation.

        9) #84 and PR #128 - make w2v and wtheta discontinuous function
        spaces

	10) PR #93 - add support for a swap-loop transform for the GOcean
	API.

        11) PR #152 - add pylintrc so that pylint's line-length limit
        matches that of pep8.

	12) PR #143 - bug fix for DAG generation in the GOcean API.

        13) PR #153 - added -v option to the psyclone script to show the
	version

	14) PR #136 - add support for intergrid kernels (required for
	multigrid)

	15) PR #149 - add support for GH_READWRITE access for
	discontinuous fields

	16) PR #163 - updating PSyclone to work with the latest version of
	the parser (0.0.7) as the API has changed

	17) PR #169 - add support for specifying stencils in the GOcean
	kernel meta-data.

release 1.5.1 3rd December 2017

	1) #53 and PR #88 Add a version file so that PSyclone does not
	need to be installed to generate documentation.

	2) #94, #96, #98 and PR #97 Make name="name" support in invoke
	calls more robust e.g. names must be valid fortran and match
	should be insensitive to case.

	3) #76 and PR #89 Add support for the new LFRic quadrature
	api. Currently only gh_quadrature_xyoz is supported.

        4) #99 and PR #100 Make the author list for the user manual
        strictly alphabetical.

        5) #50 and PR #78 Implement a redundant-computation transformation.
        This enables a user to request that a kernel (or kernels) is
        computed out into the halo region and any affected halo swaps
        be updated (and/or removed) as required.

        6) #103 and PR #104. Bug fix to ensure that a halo swap is not
        inserted if read annexed dofs are already clean due to a previous
	write to the L1 halo.

release 1.5.0 3rd October 2017

        1) #20 and PR #28 Add dependence analysis (and a Move
        transformation) to PSyclone. This will subsequently allow for
        the safe implementation of more complex schedule transformations
        and optimisations.

	2) #16 and PR #29 Update and add new PSyclone-generated builtins
	to support the functionality required by the current LFRic code.

        3) #43 and PR #44 Update of Met Office-specific install script to
	symlink the generator.py file rather than copy it.

	4) #40 and PR #47 Update example dynamo/eg3 to use builtins and to
	merge invokes together as much as possible

	5) #45 and PR #49 Change of kernel metadata names from
	evaluator_shape to gh_shape and modifications to its values.

	6) #3 and PR #51 Restructure repository to allow installation via
	pip. Due to this change we can now use travis and coveralls within
	github for automated testing. Also, new releases are now
	automatically uploaded to pypi (via travis) and status badges can
	now be used so have been added to the README.md file (which is
	shown on the main github page).

	7) #55 and PR #66 Update the documentation to cover installation
	on systems running OpenSUSE.

	8) #61 and PR #71 Re-name existing Dynamo0.3 builtins to follow
	a consistent scheme and add support for some new ones (including
	setval_{c,X}, X_minus_bY etc.). See psyclone.pdf for the full list.

	9) #32 and PR #39 Adds the ability to build the generated code
	when performing python tests. Generated code can now be checked
	that it compiles as part of the development process helping avoid
	making releases with errors in them. Note, existing tests still
	need to be updated.

	10) #54 and PR #63 The view() method (used to look at the internal
	representation of a schedule) now outputs coloured text (for
	easier viewing) if the termcolor package is installed.

	11) #69 and PR #73 setup.py now uses an absolute path to avoid
	failing tests (with file not found) in some environments when
	running py.test from a different directory to the tests
	themselves.

	12) #59 and PR #75 added metadata support for inter-grid kernels
	which will be used for the multi-grid code.

	13) #82 and PR #83 modified a test to work with different versions
	of graphviz which output files with different ammounts of white
	space

	14) #52 and PR #60 added support for evaluators. An evaluator is
	specified by setting the gh_shape metadata in kernels
	appropriately.

	15) #85 and PR #86 - minor correction to documentation (section
	on Inter-Grid kernel rules was in the wrong place).

release 1.4.1

	1) #22 Updated PSyclone to support enforce_operator_bc_kernel (in
	addition to the existing enforce_bc_kernel) for boundary
	conditions. PSyclone no longer adds in boundary condition calls
	after a call to matrix_vector_kernel, it is up to the user to add
	them in the algorithm layer in all cases. Also fixes a bug
	introduced in 1.4.0 issue #12.

release 1.4.0

        1) #2 Add support for kernel meta-data changes required to support
        Column-wise operators (Column Matrix Assembly).

	2) #6 Implement support for Column Matrix Assembly (CMA) in
	PSyclone.

	3) #12 Add support for the any_w2 function space descriptor

	4) #33 Update documentation referring to fparser.

release 1.3.3

	1) Project moved to github: https://github.com/stfc/PSyclone.
        Hereon, ticket numbers now refer to github issues instead of
        SRS tickets.

        2) #8 Remove the f2py source code from the PSyclone distribution
	and use the fparser package (https://github.com/stfc/fparser)
	instead.

	3) #9 Update documentation to refer to github.

release 1.3.2

	1) #908 Bug fix - ensure that the dynamo0p3 loop colour
	transformation raises an exception if the loop it is applied to
	does not iterate over cells.

	2) #923 Change the name of the generated Fortran module containing
	PSy-layer code for the Dynamo 0.3 API. The name is constructed by
	appending "_psy" to the Algorithm-layer name. (Previously "psy_"
	was prepended to it.) The names of modules produced by other
	PSyclone APIs are unchanged.

release 1.3.1

	1) #846 Bug fix - generate correct logic and code for the call to
	enforce_bc_kernel after a call to matrix_vector_kernel. Also add
	w2h and w2v as spaces that cause enforce_bc_kernel to be called in
	addition to W1 and W2.

	2) #853 Bug fix - make sure that an operator object is only used
	as a lookup for values in the PSy layer when it is correct to do
	so. In particular, make sure that the dofmap lookup is always from
	a field, as this fixes the known bug.

release 1.3.0

        1) #686 Stencil extents (depth of the stencil) are now changed to
	stencil sizes (number of elements in the stencil) in the PSy-layer
	as the algorithm expects to provide the former and the kernel
	expects to receive the latter.

        2) #706 Avoid potential name clashes with stencil extent and
	direction arguments (as well as nlayers).

	3) #673 Fixed an xfailing built-in test

        4) #721 Bug fix - generate correct variable declarations and
        module use statements without modifying original arguments. Invokes
        requiring multiple enforce-bc kernel calls are now handled correctly.

        5) #727 Addition of install script (contributions/install) to
	support Met Office modules environment.

        6) #423 Add support for distributed-memory for built-ins.
        Global sums are now generated for calls to inner_product and
        sum_field built-in kernels.

        7) #489 Support the dereferencing of an object/derived type in the
	argument list of a kernel call within an invoke in the algorithm
	layer e.g. call invoke(kern(a%b))

	8) #669 Added support for named arguments to the expression
	analyser. This is the first step towards supporting named invokes
	in PSyclone.

        9) #628 dofmap lookups are now outside loops in the
	PSy-layer. This makes no functional difference but should give a
	performance benefit.

        10) #304 Added support for named invokes in PSyclone.

	11) #580 Implemented tests for the agreed dynamo0.3 builtin
	rules. For example, all fields must be on the same function space
	within a builtin.

	12) #761 Added support for parsing evaluator metadata.

        13) #484 Add support for the use of OpenMP (including reductions)
        with builtins.

        14) #819 Re-structuring of DynKern._create_arg_list. Replaced with
	new ArgList base class which is then sub-classed to KernCallArgList
	and KernStubArgList.

	15) #576 Added tests and documentation to check and describe the
	dynamo0.3 api kernel and builtin rules.

release 1.2.4

        1) #658 Adds support for the use of real and integer literals with
	kind specified in kernel calls from the algorithm layer. For
	example 0.0_rdef. This will be particularly useful for built-ins.

        2) #475 Fixes any remaining string assert comparison errors in
	tests. Updates algen_test.py to be pep8, pyflakes and pylint
	compliant.

	3) #468 Add support for kernels that perform stencil operations.
	Stencil depth is specified at the algorithm layer.

        4) #672 Fix error in boundary layer code generation for
	matrix_vector_kernel. The function space check is now always
	correct (hopefully).

        5) #680 Bug fix: the kernel stub generator was not adding the stencil
	dofmap required by a field with stencil access.

release 1.2.3

        1) #111 Adds support for dynamo0.3 built-in operations running
	sequentially.

        2) #640 Update PSyclone to call enforce_bc_kernel after every
	call to matrix_vector_kernel if the space is W1 or W2. (Previously
	PSyclone looked for matrix_vector_mm_kernel and only W2.)

	3) #430 Adds support for multiple kernels within an invoke with
	kernel arguments specified as any_space. Previously there was a
	limit of one kernel per invoke. This is particularly relevant for
	built-ins as all of these currently have arguments that are
	any_space.

	4) #657 Changes to the declaration and assignment of the mesh
	object (it is now a pointer) within the generated PSy layer so as
	to use the mesh singleton and not generate a temporary copy of it.

release 1.2.2

        1) #575 Add parser support for stencil meta-data.

        2) #587 Changed scalar metadata names to gh_real and gh_integer

        3) #501 Updates to parser and documentation to support writing to
	scalar arguments (reductions). Note that this is currently only
	supported for serial code. Implementation of this functionality
	for OpenMP and MPI will be done under #484 and #423, respectively.

	4) #235 PSyclone now uses the appropriate intent for arguments in
	the generated PSy code. Previously it always used inout. This
	allows the algorithm developer to specify the intent of data in
	the algorithm layer appropriately, rather than being forced to use
	inout in all cases.

        5) #604 If PSyclone encounters an Algorithm file that contains no
	invoke calls then it now issues a warning and outputs that file
	unchanged (previously it did not output a file at all). No PSy
	file is created in this case.

        6) #618 fix for #235. Data with intent out should have fields
	declared as inout as internal subroutines within the field are
	dereferenced so are required as intent in.

	7) #610 When PSyclone is operating in line length limiting mode
	("-l" switch) problems are caused if it breaks a line in the middle
	of a string. PSyclone now prefixes all continued lines with an
	ampersand. This then produces valid Fortran irrespective of whether
	the line-break happens within a string.

release 1.2.1

        1) Added a PSyclone logo

        2) #360 Internal code structure changes to make the Node class
	calls() method more intuitive and consistent with other methods. A
	side effect is that the OpenMP private list should no longer
	contain any variables names that are not required (as this change
	fixes that bug).

        3) #546 Bug fix for colouring when a kernel is passed an operator.
        PSyclone was not generating the correct cell look-up when
        colouring a loop containing a kernel call with an operator. i.e.
        the PSy layer passed 'cell' to the kernel rather than
        'cmap(colour, cell)'.

        4) #542 generate correct OpenMP private list. This was actually
        fixed by the changes made under #360 (change 2 above) so this
        ticket only adds a test for this functionality.

release 1.2.0

	1) #415 Support for parsing stencil information supplied in
	Dynamo 0.3 kernel meta-data.

	2) #367 Make gocean python conform to pep8

	3) #230 Add documentation for the GOcean1.0 API

	4) #379 Make f2pygen and its tests conform to pep8, pylint and
	improve the test coverage

	5) #429 Support for read-only scalar arguments in the 0.3
	Dynamo API.

	6) #420 Support for inter-invoke halo calls and logic (for
	distributed memory)

	7) #514 Fix for a bug in the if test round a halo_exchange call
	in which arrays (vectors) did not have their index added.

	8) #521 Fix bugs in the logic for adding halo exchange calls before
	loops.

        9) #532 Fix in the logic for adding halo exchange calls before
	loops which recognises that operators do not have halos.

	10) #467 Support transformations in Distributed Memory. Enable the use
	of OpenMP (and other transformations) with DM. Note that PSyclone
	currently does not support halo swaps inside OpenMP parallel regions.

release 1.1.0

	1) #263 OpenMP (including colouring) supported for the 0.3 Dynamo
	API. Parser fails gracefully if Kernel-code parsing is
	unsuccessful.

	2) #292 Add support for user-supplied transformations/optimisations
	via a script passed to the generate function/command-line. This
	enables the use of transformations within a build system.

	3) #292 Documentation for Algorithm, PSy and Kernel layers as well
	as for transformations has been added. Documentation on using
	transformation scripts then added on top.

	4) #292 Dynamo example scripts fixed.

	5) #258 First version of kernel-stub generator added. Given kernel
	metadata as input, PSyclone has enough information to be able to
	generate stub kernel code with the appropriate arguments and
	argument ordering.

	6) #364 OpenMP fix for update 1) (ticket #263). 'ncolour' variable
	now declared. New dynamo/eg3 example added to demonstrate the use
	of transformation scripts introduced in update 2) (ticket #292).

	7) #361 Minor updates to the kernel-stub generator. Remove spurious
	dir() command, remove additional '_code' from kernel subroutine name
	and add 'implicit none' to the generated subroutine.

	8) #363 Update to the generator script to catch any run-time
	errors generated by the user-supplied optimisation script. Such
	errors are then reported in a user-friendly fashion to aid
	debugging.

	9) #272 Added support for explicit loop bounds in the PSy layer
	for the GOcean1.0 API. The Cray compiler makes use of this
	information to generate more efficient code. This option can be
	switched on or off using a transformation.

        10) Support the module in-lining of kernel subroutines. i.e.
        kernel subroutines can be moved into the same module that contains
        the invoke from which they are called. This functionality is
        implemented as a new transformation, 'KernelModuleInlineTrans'.
        psyGen.py has also been made fully pep8 compliant.

        11) #347 Add an option to limit the length of lines of fortran
        code that PSyclone generates to 132 chars. This is the length
        mandated by the Fortran free-format standard and is rigorously
        enforced by some compilers (e.g. PGI). As a part of this change
        PSyclone now checks the length of all lines of source code in
	the Algorithm and Kernel files that it parses.

        12) #395 Add support for new function spaces: Wtheta, W2H and W2V.

	13) #396 and #397 Make all tests work with Python 2.6. Previously
	two of the tests only worked in Python 2.7 and a third caused
	resource issues when using deepcopy.

        14) #355 Support operators where the "to" and "from" function
        spaces are different.

release 1.0.2

	1) #299 temporary boundary condition
	support. matrix_vector_kernel_mm now uses enforce_bc_code rather
	than enforce_boundary_w2 as the latter is no longer used.

release 1.0.1

	1) #299 temporary boundary condition support. removed the
	hardwired code and associated test that added an additional
	boundary condition array to ru_kernel as this kernel is no longer
	required. Added support for generating a boundary condition array
	in the PSy layer and passing it into the enforce_bc_kernel
	kernel. enforce_bc_kernel should be placed by the algorithm
	developer to enforce boundary conditions.

release 1.0.0
