{# Added this as Jinja code so that it is understood that the
   comment does not apply to THIS file. #}
{{ "! ================================================== !" }}
{{ "! THIS FILE IS CREATED FROM THE JINJA TEMPLATE FILE. !" }}
{{ "! DO NOT MODIFY DIRECTLY!                            !" }}
{{ "! ================================================== !" }}

! -----------------------------------------------------------------------------
! BSD 3-Clause License
!
! Copyright (c) 2020-2025, Science and Technology Facilities Council.
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! * Redistributions of source code must retain the above copyright notice, this
!   list of conditions and the following disclaimer.
!
! * Redistributions in binary form must reproduce the above copyright notice,
!   this list of conditions and the following disclaimer in the documentation
!   and/or other materials provided with the distribution.
!
! * Neither the name of the copyright holder nor the names of its
!   contributors may be used to endorse or promote products derived from
!   this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
! FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
! COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
! INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
! BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
! LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGE.
! -----------------------------------------------------------------------------
! Author J. Henrichs, Bureau of Meteorology
! Modified I. Kavcic, Met Office

!> This module implements the value range check for the LFRic API
!!

{% set ALL_PREC = ["32", "64"] -%}

module value_range_check_psy_data_mod

    use, intrinsic :: iso_fortran_env, only : int64, int32,   &
                                              real32, real64, &
                                              stderr => Error_Unit
    {% for prec in ALL_PREC %}
    use field_r{{prec}}_mod, only : field_r{{prec}}_type, &
                              field_r{{prec}}_proxy_type
    {% endfor %}
    use integer_field_mod, only   : integer_field_type, integer_field_proxy_type
    use value_range_check_base_mod, only   : ValueRangeCheckBaseType, is_enabled

    implicit none

    type, extends(ValueRangeCheckBaseType), public :: value_range_check_PSyDataType

    contains

        ! The LFRic-specific procedures defined here
        {% set all_declares=[] -%}
        {% set all_writes=[] -%}
        {% for prec in ALL_PREC %}
        procedure :: DeclareField_r{{prec}}
        procedure :: ProvideField_r{{prec}}
        procedure :: DeclareFieldVector_r{{prec}}
        procedure :: ProvideFieldVector_r{{prec}}
          {{- all_declares.append("DeclareField_r{{prec}}") or ""}}
          {{- all_declares.append("DeclareFieldVector_r{{prec}}") or ""}}
          {{- all_writes.append("WriteField_r{{prec}}") or ""}}
          {{- all_writes.append("WriteFieldVector_r{{prec}}") or ""}}
        {% endfor %}

        procedure :: DeclareIntField
        procedure :: ProvideIntField
        procedure :: DeclareIntFieldVector
        procedure :: ProvideIntFieldVector

        !> Declare generic interface for PreDeclareVariable:
        generic, public :: PreDeclareVariable =>  &
        {% for prec in ALL_PREC %}
                           DeclareField_r{{prec}},      &
                           DeclareFieldVector_r{{prec}},&
        {% endfor %}
                           DeclareIntField,       &
                           DeclareIntFieldVector

        !> The generic interface for providing the value of variables
        !! (which checks for non normal IEEE numbers)
        generic, public :: ProvideVariable =>     &
        {% for prec in ALL_PREC %}
                           ProvideField_r{{prec}},      &
                           ProvideFieldVector_r{{prec}},&
        {% endfor %}
                           ProvideIntField,       &
                           ProvideIntFieldVector

    end type value_range_check_PSyDataType

contains

    {% for prec in ALL_PREC %}

    ! -------------------------------------------------------------------------
    !> @brief This subroutine declares LFRic real-valued fields. No
    !! functionality is needed for ValueRangeCheck, so it just calls the
    !! function in the base class.
    !! @param[in,out] this The instance of the value_range_check_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    subroutine DeclareField_r{{prec}}(this, name, value)

        implicit none

        class(value_range_check_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(field_r{{prec}}_type), intent(in)                   :: value

        type(field_r{{prec}}_proxy_type)                         :: value_proxy

        value_proxy = value%get_proxy()
        call this%PreDeclareVariable(name, value_proxy%data)

    end subroutine DeclareField_r{{prec}}

    ! -------------------------------------------------------------------------
    !> @brief This subroutine calls the corresponding function in the base class
    !! to do the value range checking. It accesses the actual data in the field
    !! using the proxy object.
    !! @param[in,out] this The instance of the value_range_check_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    subroutine ProvideField_r{{prec}}(this, name, value)

        implicit none

        class(value_range_check_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(field_r{{prec}}_type), intent(in)                   :: value

        type(field_r{{prec}}_proxy_type)                         :: value_proxy

        if (.not. is_enabled) return

        if (this%verbosity > 1) then
            write(stderr, *) "PSyData - testing ", name
        endif
        value_proxy = value%get_proxy()
        call this%ProvideVariable(name, value_proxy%data)

    end subroutine ProvideField_r{{prec}}

    ! -------------------------------------------------------------------------
    !> @brief This subroutine declares LFRic real-valued field vectors. It
    !! calls the corresponding function in the base class for each member
    !! of the field vector.
    !! @param[in,out] this The instance of the value_range_check_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    subroutine DeclareFieldVector_r{{prec}}(this, name, value)

        implicit none

        class(value_range_check_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(field_r{{prec}}_type), dimension(:), intent(in)     :: value

        integer :: i
        character(8) :: index_string   ! Enough for a 6 digit number plus '()'

        ! Provide each member of the vector as a normal field. This way
        ! the value range checking will be done for each member individually.
        do i = 1, size(value, 1)
            write(index_string, '("(",i0,")")') i
            call this%PreDeclareVariable(name//trim(index_string), value(i))
        enddo

    end subroutine DeclareFieldVector_r{{prec}}

    ! -------------------------------------------------------------------------
    !> @brief This subroutine calls the value range check function for each
    !! member in the real-valued LFRic vector field.
    !! @param[in,out] this The instance of the value_range_check_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The vector of fields.
    subroutine ProvideFieldVector_r{{prec}}(this, name, value)

        implicit none

        class(value_range_check_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(field_r{{prec}}_type), dimension(:), intent(in)     :: value

        integer      :: i
        character(8) :: index_string   ! Enough for a 6 digit number plus '()'

        if (.not. is_enabled) return

        ! Provide each member of the vector as a normal field. This way
        ! the value range checking will be done for each member individually.
        do i = 1, size(value, 1)
            write(index_string, '("(",i0,")")') i
            call this%ProvideVariable(name//trim(index_string), value(i))
        enddo

    end subroutine ProvideFieldVector_r{{prec}}

    {% endfor %}

    ! -------------------------------------------------------------------------
    !> @brief This subroutine declares LFRic integer-valued fields. No
    !! functionality is needed for ValueRangeCheck, so it is just calls the
    !! corresponding function in the base class.
    !! @param[in,out] this The instance of the value_range_check_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    subroutine DeclareIntField(this, name, value)

        implicit none

        class(value_range_check_PSyDataType), intent(inout), target :: this
        character(*), intent(in) :: name
        type(integer_field_type), intent(in) :: value

        type(integer_field_proxy_type) :: value_proxy

        value_proxy = value%get_proxy()
        call this%PreDeclareVariable(name, value_proxy%data)

    end subroutine DeclareIntField

    ! -------------------------------------------------------------------------
    !> @brief This subroutine calls the corresponding function in the base
    !! class to do the integer field value range checking. It accesses the
    !! actual data in the field using the proxy object.
    !! @param[in,out] this The instance of the value_range_check_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    subroutine ProvideIntField(this, name, value)

        use integer_field_mod, only : integer_field_type, &
                                      integer_field_proxy_type

        implicit none

        class(value_range_check_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(integer_field_type), intent(in)               :: value

        type(integer_field_proxy_type) :: value_proxy

        if (.not. is_enabled) return

        if (this%verbosity > 1) then
            write(stderr, *) "PSyData - testing ", name
        endif
        value_proxy = value%get_proxy()
        call this%ProvideVariable(name, value_proxy%data)

    end subroutine ProvideIntField

    ! -------------------------------------------------------------------------
    !> @brief This subroutine declares LFRic integer-valued field vectors. No
    !! functionality is needed here, so it is just calls the corresponding
    !! function for each member of the vector of fields.
    !! @param[in,out] this The instance of the value_range_check_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    subroutine DeclareIntFieldVector(this, name, value)

        use integer_field_mod, only : integer_field_type

        implicit none

        class(value_range_check_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(integer_field_type), dimension(:), intent(in) :: value

        integer      :: i
        character(8) :: index_string   ! Enough for a 6 digit number plus '()'

        ! Provide each member of the vector as a normal field. This way
        ! the value range checking will be done for each member individually.
        do i = 1, size(value, 1)
            write(index_string, '("(",i0,")")') i
            call this%PreDeclareVariable(name//trim(index_string), value(i))
        enddo

    end subroutine DeclareIntFieldVector

    ! -------------------------------------------------------------------------
    !> @brief This subroutine calls the value range checking test for each
    !! member of the vector of fields.
    !! @param[in,out] this The instance of the value_range_check_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The vector of fields.
    subroutine ProvideIntFieldVector(this, name, value)

        use integer_field_mod, only : integer_field_type

        implicit none

        class(value_range_check_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(integer_field_type), dimension(:), intent(in) :: value

        integer      :: i
        character(8) :: index_string   ! Enough for a 6 digit number plus '()'

        if (.not. is_enabled) return

        ! Provide each member of the vector as a normal field. This way
        ! the value range checking will be done for each member individually.
        do i = 1, size(value, 1)
            write(index_string, '("(",i0,")")') i
            call this%ProvideVariable(name//trim(index_string), value(i))
        enddo

    end subroutine ProvideIntFieldVector

    ! -------------------------------------------------------------------------

end module value_range_check_psy_data_mod
