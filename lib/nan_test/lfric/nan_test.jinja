{# Added this as jinja code so that it is understood that the
   comment does not apply to THIS file. #}
{{ "! ==================================================" }}
{{ "! THIS FILE IS CREATED FROM THE JINJA TEMPLATE FILE " }}
{{ "! DO NOT MODIFY DIRECTLY                            " }}
{{ "! ==================================================" }}

{# The LFRic NANTest library uses the NANTestBaseType to
   implement the PreDeclareVariable() and ProvideVariable()
   methods for all Fortran basic types, and for 1- to 4-
   dimensional arrays. It only implements the required
   support for LFRic fields and vector-fields. Still,
   this subroutine has to create the generic interfaces to
   ALL these functions (the ones from NANTestBaseType and
   and for fields/vector-fields), for which jinja is used. -#}

{% if ALL_DIMS is not defined %}
   {# Support 1 to 4 dimensional arrays if not specified #}
   {% set ALL_DIMS = [1, 2, 3, 4] %}
{% endif %}

{# The types that are supported for the DeclareVariable() and
   ProvideVariable() routines. The first entry of each tuple
   is the name used when naming subroutines and in user messages.
   The second entry is the Fortran declaration. The third entry
   is the number of bits. There is slightly different code
   required for 32 and 64 bit values (due to the fact that the
   Fortran transfer(value, mould) function leaves undefined bits
   when mould is larger than value.) #}

{% if ALL_TYPES is not defined %}
   {% set ALL_TYPES = [ ("Double", "real(kind=real64)",   64),
                        ("Real",   "real(kind=real32)",   32),
                        ("Int",    "integer(kind=int32)", 32) ] %}
{% endif %}

! -----------------------------------------------------------------------------
! BSD 3-Clause License
!
! Copyright (c) 2020, Science and Technology Facilities Council.
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
!
! * Redistributions of source code must retain the above copyright notice, this
!   list of conditions and the following disclaimer.
!
! * Redistributions in binary form must reproduce the above copyright notice,
!   this list of conditions and the following disclaimer in the documentation
!   and/or other materials provided with the distribution.
!
! * Neither the name of the copyright holder nor the names of its
!   contributors may be used to endorse or promote products derived from
!   this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
! FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
! COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
! INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
! BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
! LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGE.
! -----------------------------------------------------------------------------
! Authors J. Henrichs, Bureau of Meteorology

!> This module implements a NAN verification for the LFRic API
!! 

module nan_test_psy_data_mod
    use, intrinsic :: iso_fortran_env, only : int64, int32,   &
                                              real32, real64, &
                                              stderr=>Error_Unit
    use field_mod, only : field_type
    use nan_test_base_mod, only : NANTestBaseType, is_enabled

    implicit none

    type, extends(NANTestBaseType), public:: nan_test_PSyDataType

    contains
        ! The LFRic-specific procedures defined here
        procedure :: DeclareField,  ProvideField
        procedure :: DeclareFieldVector,  ProvideFieldVector

        {# Collect the various procedures for the same generic interface #}
        {# ------------------------------------------------------------- #}
        {% set all_declares=[] %}
        {% set all_provides=[] %}
        {% for name, type, bits in ALL_TYPES %}
          {{ all_declares.append("DeclareScalar"~name) or "" -}}
          {{ all_provides.append("ProvideScalar"~name) or "" -}}
          {% for dim in ALL_DIMS %}
            {{ all_declares.append("DeclareArray"~dim~"d"~name) or "" -}}
            {{ all_provides.append("ProvideArray"~dim~"d"~name) or "" -}}
          {% endfor %}
        {% endfor %}

        {% set indent="            " %}
        ! Declare generic interface for PreDeclareVariable:
        generic, public :: PreDeclareVariable => &
            DeclareField, &
            DeclareFieldVector, &
            {{all_declares|join(", &\n"+indent) }}

        !> The generic interface for providing the value of variables
        !! (which checks for non normal IEEE numbers)
        generic, public :: ProvideVariable => &
            ProvideField,       &
            ProvideFieldVector, &
            {{all_provides|join(", &\n"+indent) }}
                                              
    end type nan_test_PSyDataType

Contains

    ! -------------------------------------------------------------------------
    !> This subroutine does not do anything (as declaration is not needed
    !!for NAN checking).
    !! @param[inout] this The instance of the nan_test_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    !! @param[inout] this The instance of the nan_test_PSyDataType.
    subroutine DeclareField(this, name, value)
        implicit none
        class(nan_test_PSyDataType), intent(inout), target :: this
        character(*), intent(in) :: name
        type(field_type), intent(in) :: value

    end subroutine DeclareField

    ! -------------------------------------------------------------------------
    !> This subroutine checks whether an LFRic field has NAN or infinite
    !! floating point values.
    !! @param[inout] this The instance of the nan_test_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    subroutine ProvideField(this, name, value)
        use field_mod, only : field_type, field_proxy_type
        implicit none

        class(nan_test_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(field_type), intent(in)                       :: value

        type(field_proxy_type) :: value_proxy
        
        if (.not. is_enabled) return

        if (this%verbosity>1) then
            write(stderr, *) "PSYDATA - testing ", name
        endif
        value_proxy = value%get_proxy()
        call this%ProvideVariable(name, value_proxy%data)
    end subroutine ProvideField

    ! -------------------------------------------------------------------------
    !> This subroutine declares LFRic vector fields. No functionality is
    !! needed here, so it is just an empty function.
    !! @param[inout] this The instance of the nan_test_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The value of the variable.
    subroutine DeclareFieldVector(this, name, value)
        use field_mod, only : field_type
        implicit none

        class(nan_test_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(field_type), dimension(:), intent(in)         :: value
    end subroutine DeclareFieldVector

    ! -------------------------------------------------------------------------
    !> This subroutine checks whether an LFRic vector field has NAN or
    !! infinite floating point values.
    !! @param[inout] this The instance of the nan_test_PSyDataType.
    !! @param[in] name The name of the variable (string).
    !! @param[in] value The vector of fields.
    subroutine ProvideFieldVector(this, name, value)
        use field_mod, only : field_type
        implicit none

        class(nan_test_PSyDataType), intent(inout), target :: this
        character(*), intent(in)                           :: name
        type(field_type), dimension(:), intent(in)         :: value

        integer      :: i
        character(8) :: index_string   ! Enough for a 6 digit number plus '()'

        if (.not. is_enabled) return

        if (this%verbosity>1) then
            write(stderr, *) "PSYDATA - testing ", name
        endif

        ! Provide each member of the vector as a normal field. This way
        ! the NAN/infinite testing will be done for each member individually.
        do i=1, size(value, 1)
            write(index_string, '("(",i0,")")') i
            call this%ProvideVariable(name//trim(index_string), value(i))
        enddo
    end subroutine ProvideFieldVector

    ! -------------------------------------------------------------------------
    
end module nan_test_psy_data_mod

