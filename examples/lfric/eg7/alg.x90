!-----------------------------------------------------------------------------
! Copyright (c) 2017-2024,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------
! LICENCE.original is available from the Met Office Science Repository Service:
! https://code.metoffice.gov.uk/trac/lfric/browser/LFRic/trunk/LICENCE.original
! -----------------------------------------------------------------------------
! BSD 3-Clause License
!
! Modifications copyright (c) 2017-2022, Science and Technology Facilities Council
! All rights reserved.
! 
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions are met:
! 
! * Redistributions of source code must retain the above copyright notice, this
!   list of conditions and the following disclaimer.
! 
! * Redistributions in binary form must reproduce the above copyright notice,
!   this list of conditions and the following disclaimer in the documentation
!   and/or other materials provided with the distribution.
! 
! * Neither the name of the copyright holder nor the names of its
!   contributors may be used to endorse or promote products derived from
!   this software without specific prior written permission.
! 
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
! DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
! FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
! DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
! SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
! OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
! OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
! -----------------------------------------------------------------------------
! Modified by I. Kavcic, Met Office
! Modified by R. W. Ford, STFC Daresbury Lab
!
!> @brief Example of columnwise assembled (CMA) operators.
module alg
  use columnwise_op_asm_kernel_mod,      only : columnwise_op_asm_kernel_type
  use columnwise_op_app_kernel_mod,      only : columnwise_op_app_kernel_type
  use columnwise_op_mul_kernel_mod,      only : columnwise_op_mul_kernel_type
  use matrix_vector_kernel_mod,          only : matrix_vector_kernel_type
  use field_mod,                         only : field_type
  use operator_mod,                      only : operator_type
  use columnwise_operator_mod,           only : columnwise_operator_type

contains

  subroutine test_cma_multiply_grad_v_div_v(grad_v_cma, &
                                            div_v_cma)

    implicit none

    type(field_type) :: p_tmp, u_v_in, u_v_out, u_v_out_cma
    type(columnwise_operator_type) :: grad_v_cma, div_v_cma
    type(columnwise_operator_type) :: grad_v_div_v_cma
    type(operator_type) :: grad_v
    real(kind=r_def), parameter :: tolerance=1.0E-12
    character(len=32) :: label = "multiply D_v^T.D_v"


    ! Construct combined CMA operator A = D_v^T.D_v
    grad_v_div_v_cma  = grad_v_cma%columnwise_operator_product( div_v_cma)

    call invoke( columnwise_op_mul_kernel_type( grad_v_cma, &
                                                div_v_cma,  &
                                                grad_v_div_v_cma ), &
                 ! Initialise fields
                 setval_c( p_tmp, 0.0_r_def ),                      &
                 setval_c( u_v_out, 0.0_r_def ),                    &
                 setval_c( u_v_out_cma, 0.0_r_def ),                &

                 ! Apply combined CMA operator A = D_v^T.D_v
                 columnwise_op_app_kernel_type( u_v_out_cma,        &
                                                u_v_in,             &
                                                div_v_cma ),        &
                 ! Manually apply boundary conditions
                 matrix_vector_kernel_type( p_tmp,                  &
                                            u_v_in,                 &
                                            grad_v ),               &
                 ! Successively apply divergence and gradient operators:
                 ! first D_v, then D_v^T
                 matrix_vector_kernel_type( u_v_out,                &
                                            p_tmp,                  &
                                            grad_v ) )

  end subroutine test_cma_multiply_grad_v_div_v

end module alg
