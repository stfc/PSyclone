diff --git a/lfric/components/driver/source/driver_mesh_mod.f90 b/lfric/components/driver/source/driver_mesh_mod.f90
index 2237d181..f075436d 100644
--- a/lfric/components/driver/source/driver_mesh_mod.f90
+++ b/lfric/components/driver/source/driver_mesh_mod.f90
@@ -168,7 +168,8 @@ subroutine init_mesh( configuration,           &
   !============================================================================
   if (present(alt_names)) then
     if (size(alt_names) == size(mesh_names)) then
-      allocate(names, source=alt_names)
+      !allocate(names, source=alt_names)
+      names=alt_names
     else
       write(log_scratch_space, '(A)')                   &
           'Specified alternative mesh names to does '// &
@@ -176,7 +177,8 @@ subroutine init_mesh( configuration,           &
       call log_event(log_scratch_space, LOG_LEVEL_ERROR)
     end if
   else
-    allocate(names, source=mesh_names)
+    !allocate(names, source=mesh_names)
+    names=mesh_names
   end if
 
 
diff --git a/lfric/infrastructure/build/compile.mk b/lfric/infrastructure/build/compile.mk
index 19c9cff9..b5cd3014 100644
--- a/lfric/infrastructure/build/compile.mk
+++ b/lfric/infrastructure/build/compile.mk
@@ -140,18 +140,26 @@ $(LIB_DIR)/lib%.a: $$($$(shell basename $$* | tr a-z A-Z)_OBJS) | $(LIB_DIR)
 .PRECIOUS: %.o
 %.o: %.f90 | $(MOD_DIR)
 	$(call MESSAGE,Compile,$<)
+	$(eval TMP_MOD_DIR := $(shell mktemp -d))
+	mkdir -p $(TMP_MOD_DIR)
 	$(Q)$(TIME_TOOL) $(FC) $(FFLAGS_BASE) $(FFLAGS_EXTRA)\
-	          $(MODULE_DESTINATION_ARGUMENT) \
+	          $(F_MOD_DESTINATION_ARG)$(TMP_MOD_DIR) \
 	          $(MODULE_SOURCE_ARGUMENT) \
-	          $(INCLUDE_ARGS) -c -o $(basename $@).o $<
+	          $(INCLUDE_ARGS) -Imod -c -o $(basename $@).o $<
+	bash $(LFRIC_BUILD)/update_mod.sh $(TMP_MOD_DIR) $(MOD_DIR)
+	rm -rf $(TMP_MOD_DIR)
 	$(call MESSAGE,Compiled,$<)
 
 %.o: %.F90 | $(MOD_DIR)
 	$(call MESSAGE,Pre-process and compile,$<)
+	$(eval TMP_MOD_DIR := $(shell mktemp -d))
+	mkdir -p $(TMP_MOD_DIR)
 	$(Q)$(TIME_TOOL) $(FC) $(FFLAGS_BASE) $(FFLAGS_EXTRA) \
-	          $(MODULE_DESTINATION_ARGUMENT) \
+	          $(F_MOD_DESTINATION_ARG)$(TMP_MOD_DIR) \
 	          $(MODULE_SOURCE_ARGUMENT) \
-	          $(INCLUDE_ARGS) $(MACRO_ARGS) -c -o $(basename $@).o $<
+	          $(INCLUDE_ARGS) -Imod $(MACRO_ARGS) -c -o $(basename $@).o $<
+	bash $(LFRIC_BUILD)/update_mod.sh $(TMP_MOD_DIR) $(MOD_DIR)
+	rm -rf $(TMP_MOD_DIR)
 	$(call MESSAGE,Compiled,$<)
 
 
diff --git a/lfric/infrastructure/build/tools/DependencyRules b/lfric/infrastructure/build/tools/DependencyRules
index 9d4db390..e37384fc 100755
--- a/lfric/infrastructure/build/tools/DependencyRules
+++ b/lfric/infrastructure/build/tools/DependencyRules
@@ -101,6 +101,8 @@ if __name__ == '__main__':
                         prereq_strings.append(str(prereq))
                 print(f'{filename} : {" ".join(prereq_strings)}',
                       file=listFile)
+            print('%.mod:\n\t@:',
+                  file=listFile)
     except:
         os.unlink(args.output)
         traceback.print_exc(file=sys.stdout)
diff --git a/lfric/infrastructure/build/tools/configurator/templates/loader.f90.jinja b/lfric/infrastructure/build/tools/configurator/templates/loader.f90.jinja
index fbd03f17..ba9f035f 100644
--- a/lfric/infrastructure/build/tools/configurator/templates/loader.f90.jinja
+++ b/lfric/infrastructure/build/tools/configurator/templates/loader.f90.jinja
@@ -27,7 +27,8 @@ module {{moduleName}}
 {{' '*indent}}{{listname}}_is_loaded, &
 {{' '*indent}}{{listname}}_reset_load_status, &
 {{' '*indent}}{{listname}}_final, &
-{{' '*indent}}get_{{listname}}_nml
+{{' '*indent}}get_{{listname}}_nml, &
+{{' '*indent}}get_{{listname}}_nml2
 {%-   endfor %}
 {%- endif %}
 
@@ -192,7 +193,10 @@ contains
 
     type(namelist_collection_type), intent(inout) :: nml_bank
 
-    type(namelist_type) :: nml_obj
+    ! FS#35515
+{%- for listname in namelists %}
+    type(namelist_type), save :: nml_obj_{{listname}}
+{%- endfor %}
 
     integer(i_def) :: i, j
 
@@ -225,8 +229,9 @@ contains
             call read_{{listname}}_namelist( unit, local_rank, scan )
             if (.not. scan) then
               call postprocess_{{listname}}_namelist()
-              nml_obj = get_{{listname}}_nml()
-              call nml_bank%add_namelist(nml_obj)
+              !nml_obj = get_{{listname}}_nml()
+              !call nml_bank%add_namelist(nml_obj)
+              call get_{{listname}}_nml2(nml_obj_{{listname}},nml_bank)
             end if
           else
             write( log_scratch_space, '(A)' )      &
diff --git a/lfric/infrastructure/build/tools/configurator/templates/namelist.f90.jinja b/lfric/infrastructure/build/tools/configurator/templates/namelist.f90.jinja
index d95e764d..a9d2b9ec 100644
--- a/lfric/infrastructure/build/tools/configurator/templates/namelist.f90.jinja
+++ b/lfric/infrastructure/build/tools/configurator/templates/namelist.f90.jinja
@@ -17,6 +17,7 @@ module {{listname}}_config_mod
 
   use namelist_mod,      only: namelist_type
   use namelist_item_mod, only: namelist_item_type
+  use namelist_collection_mod, only: namelist_collection_type
 
 {%- for module, symbols in use_from | dictsort %}
 {%-   if loop.first %}{{'\n'}}{% endif %}
@@ -34,7 +35,7 @@ module {{listname}}_config_mod
 {{' '*12}}{{listname}}_is_loadable, {{listname}}_is_loaded, &
 {{' '*12}}{{listname}}_reset_load_status, &
 {{' '*12}}{{listname}}_multiples_allowed, {{listname}}_final, &
-{{' '*12}}get_{{listname}}_nml
+{{' '*12}}get_{{listname}}_nml, get_{{listname}}_nml2
 
 {%- for name in enumerations | sort %}
 {%-   if loop.first %}{{'\n'}}{%- endif %}
@@ -401,12 +402,21 @@ contains
     type(namelist_type)      :: namelist_obj
     type(namelist_item_type) :: members({{parameters|length}})
 
+    ! FS#35515
+    allocate(namelist_obj%members({{parameters|length}}))
+{%- for name, parameter in parameters | dictsort %}
+{%-   if loop.first %}{{'\n'}}{% endif %}
+      call namelist_obj%members({{loop.index}})%initialise( &
+                  '{{parameter.name}}', {{parameter.name}} )
+{{- '\n'}}
+{%- endfor %}
 {%- for name, parameter in parameters | dictsort %}
 {%-   if loop.first %}{{'\n'}}{% endif %}
       call members({{loop.index}})%initialise( &
                   '{{parameter.name}}', {{parameter.name}} )
 {{- '\n'}}
 {%- endfor %}
+
     if (trim(profile_name) /= trim(cmdi) ) then
       call namelist_obj%initialise( trim(listname), &
                                     members, &
@@ -418,6 +428,44 @@ contains
 
   end function get_{{listname}}_nml
 
+  !> @brief Returns a <<namelist_type>> object populated with the
+  !>        current contents of this configuration module.
+  !> @return namelist_obj <<namelist_type>> with current namelist contents.
+  subroutine get_{{listname}}_nml2(namelist_obj,nml_bank)
+
+    implicit none
+
+    type(namelist_type)      :: namelist_obj
+    type(namelist_collection_type) :: nml_bank
+    type(namelist_item_type) :: members({{parameters|length}})
+
+    ! FS#35515
+    allocate(namelist_obj%members({{parameters|length}}))
+{%- for name, parameter in parameters | dictsort %}
+{%-   if loop.first %}{{'\n'}}{% endif %}
+      call namelist_obj%members({{loop.index}})%initialise( &
+                  '{{parameter.name}}', {{parameter.name}} )
+{{- '\n'}}
+{%- endfor %}
+{%- for name, parameter in parameters | dictsort %}
+{%-   if loop.first %}{{'\n'}}{% endif %}
+      call members({{loop.index}})%initialise( &
+                  '{{parameter.name}}', {{parameter.name}} )
+{{- '\n'}}
+{%- endfor %}
+
+    if (trim(profile_name) /= trim(cmdi) ) then
+      call namelist_obj%initialise( trim(listname), &
+                                    members, &
+                                    profile_name = profile_name )
+    else
+      call namelist_obj%initialise( trim(listname), &
+                                    members )
+    end if
+    call nml_bank%add_namelist(namelist_obj)
+
+  end subroutine get_{{listname}}_nml2
+
 
   !> Performs any processing to be done once all namelists are loaded
   !>
diff --git a/lfric/infrastructure/build/update_mod.sh b/lfric/infrastructure/build/update_mod.sh
new file mode 100644
index 00000000..4ed8f129
--- /dev/null
+++ b/lfric/infrastructure/build/update_mod.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+
+for f in $(find $1 -type f); do
+    bname=`basename $f`
+    if [ ! -f $2/$bname ] || [[ `diff <(sed '3d' $1/$bname) <(sed '3d' $2/$bname)` ]]; then
+        echo "Updating $bname"
+        cp $1/$bname $2/$bname
+    fi
+done
diff --git a/lfric/infrastructure/source/configuration/namelist_collection_mod.f90 b/lfric/infrastructure/source/configuration/namelist_collection_mod.f90
index c52f67fc..885922fc 100644
--- a/lfric/infrastructure/source/configuration/namelist_collection_mod.f90
+++ b/lfric/infrastructure/source/configuration/namelist_collection_mod.f90
@@ -60,6 +60,7 @@ module namelist_collection_mod
     procedure, public :: get_name
     procedure, public :: namelist_exists
     procedure, public :: get_namelist_names
+    procedure, public :: print_namelists
     procedure, public :: get_namelist_profiles
     procedure, public :: get_n_namelists
     procedure, public :: get_table_len
@@ -69,7 +70,8 @@ module namelist_collection_mod
 
     procedure, public :: clear
 
-    final :: namelist_collection_destructor
+    ! FS#35515
+    ! final :: namelist_collection_destructor
 
   end type namelist_collection_type
 
@@ -402,6 +404,62 @@ function get_name( self ) result( name )
   name = self%name
 
 end function get_name
+subroutine print_namelists( self)
+
+  implicit none
+
+  class(namelist_collection_type), intent(in) :: self
+
+  character(str_def) :: name_to_add
+
+  type(namelist_type), pointer :: namelist_obj => null()
+
+  ! Pointer to linked list - used for looping through the list
+  type(linked_list_item_type), pointer :: loop => null()
+
+  integer(i_def) :: i
+  integer(i_def) :: n_lists
+
+  n_lists = self%get_n_namelists()
+
+  if (n_lists > 1) then
+
+    do i=0, self%table_len-1
+
+      loop => self%namelist_list(i)%get_head()
+
+      do while ( associated(loop) )
+
+        ! Loop over all items in this list
+        if ( associated(loop) ) then
+
+          select type( payload => loop%payload )
+          type is ( namelist_type )
+            namelist_obj => payload
+
+            name_to_add = trim(namelist_obj%get_full_name())
+            print *, name_to_add
+            call namelist_obj%print()
+          end select
+
+          loop => loop%next
+        else
+          loop => loop%next
+        end if
+      end do
+    end do
+
+  else
+    write( log_scratch_space, '(A)')              &
+        'Namelist collection '//trim(self%name)// &
+        ' is empty.'
+    call log_event( log_scratch_space, LOG_LEVEL_ERROR )
+  end if
+
+  nullify(namelist_obj)
+
+  return
+end subroutine print_namelists
 
 
 !> @brief Queries the unique names of the namelists in the collection.
diff --git a/lfric/infrastructure/source/configuration/namelist_item_mod.f90 b/lfric/infrastructure/source/configuration/namelist_item_mod.f90
index f1c607e9..03b76ff1 100644
--- a/lfric/infrastructure/source/configuration/namelist_item_mod.f90
+++ b/lfric/infrastructure/source/configuration/namelist_item_mod.f90
@@ -62,8 +62,6 @@ module namelist_item_mod
   !=========================================
   type :: namelist_item_type
 
-    private
-
     class(key_value_type), allocatable :: key_value_pair
 
   contains
diff --git a/lfric/infrastructure/source/configuration/namelist_mod.f90 b/lfric/infrastructure/source/configuration/namelist_mod.f90
index 5ddacf53..bad1d81a 100644
--- a/lfric/infrastructure/source/configuration/namelist_mod.f90
+++ b/lfric/infrastructure/source/configuration/namelist_mod.f90
@@ -23,6 +23,13 @@ module namelist_mod
                                   LOG_LEVEL_INFO
   use constants_mod,        only: imdi, rmdi, cmdi, str_def, i_def
   use namelist_item_mod,    only: namelist_item_type
+  use key_value_mod,   only: key_value_type,                                   &
+                            int32_key_value_type,     int64_key_value_type,        &
+                            int32_arr_key_value_type, int64_arr_key_value_type,    &
+                            real32_key_value_type,    real64_key_value_type,        &
+                            real32_arr_key_value_type,real64_arr_key_value_type,    &
+                            logical_key_value_type, logical_arr_key_value_type,&
+                            str_key_value_type,     str_arr_key_value_type
 
   implicit none
 
@@ -35,7 +42,8 @@ module namelist_mod
   !=========================================
   type, extends(linked_list_data_type) :: namelist_type
 
-    private
+    ! FS#35515
+    ! private
 
     character(:), allocatable :: listname
     character(str_def) :: profile_name = trim(cmdi)
@@ -65,6 +73,7 @@ module namelist_mod
     procedure :: get_listname
     procedure :: get_profile_name
     procedure :: get_full_name
+    procedure :: print => namelist_print
 
     generic   :: get_value => get_int32_value,   get_int32_arr_value,   &
                               get_int64_value,   get_int64_arr_value,   &
@@ -90,6 +99,52 @@ contains
   ! 1.0 Constructors
   !=========================================
 
+  subroutine namelist_print(self)
+
+    implicit none
+
+    class(namelist_type),     intent(inout) :: self
+
+    integer(i_def) :: i, j
+    character(:), allocatable :: key
+
+    if ( allocated(self%members) ) then
+      print *, "  ", "number of members", size(self%members)
+      do j=1, size(self%members)
+        key = self%members(j)%get_key()
+        select type( clay => self%members(j)%key_value_pair )
+        class is (int32_key_value_type)
+          print *, trim(key), clay%value
+        class is (int64_key_value_type)
+          print *, trim(key), clay%value
+        class is (real32_key_value_type)
+          print *, trim(key), clay%value
+        class is (real64_key_value_type)
+          print *, trim(key), clay%value
+        class is (logical_key_value_type)
+          print *, trim(key), clay%value
+        class is (str_key_value_type)
+          print *, trim(key), trim(clay%value)
+        class is (int32_arr_key_value_type)
+          print *, trim(key), clay%value
+        class is (int64_arr_key_value_type)
+          print *, trim(key), clay%value
+        class is (real32_arr_key_value_type)
+          print *, trim(key), clay%value
+        class is (real64_arr_key_value_type)
+          print *, trim(key), clay%value
+        class is (logical_arr_key_value_type)
+          print *, trim(key), clay%value
+        class is (str_arr_key_value_type)
+          print *, trim(key), clay%value
+        end select
+
+      end do
+
+    else
+      print *, "  ", "<empty>"
+    end if
+  end subroutine
   !------------------------------------------
   ! 1.4 GENERIC namelist constructor
   !============================================================================
@@ -118,7 +173,7 @@ contains
     end if
 
     allocate( self%listname, source=listname )
-    allocate( self%members,  source=members )
+    !allocate( self%members,  source=members )
 
   end subroutine namelist_initialise
 
diff --git a/lfric/infrastructure/source/field/field_mod.t90 b/lfric/infrastructure/source/field/field_mod.t90
index 777ec479..0001fc8e 100644
--- a/lfric/infrastructure/source/field/field_mod.t90
+++ b/lfric/infrastructure/source/field/field_mod.t90
@@ -86,6 +86,7 @@ module field_{{kind}}_mod
     !> Function to get a proxy with public pointers to the data in a
     !! field_type.
     procedure, public :: get_proxy
+    procedure, private :: get_proxy2
 
     !> Setter for the field write method
     procedure, public :: set_write_behaviour
@@ -226,18 +227,39 @@ contains
   !>
   !> @return The proxy type with public pointers to the elements of
   !> field_type
+  subroutine get_proxy2(self, proxy)
+    implicit none
+    class(field_{{kind}}_type), target, intent(in)  :: self
+    type(field_{{kind}}_proxy_type), intent(inout) :: proxy
+    type(field_{{kind}}_type), pointer    :: sself
+
+    ! Call the routine that initialises the proxy for data held in the parent
+    sself => self
+    call sself%field_parent_proxy_initialiser(proxy)
+
+    if (allocated(sself%data))then
+      proxy%data => sself%data
+    else
+      ! Fields can alternatively point to bespoke data
+      proxy%data => sself%override_data
+    end if
+
+  end subroutine get_proxy2
+
   type(field_{{kind}}_proxy_type) function get_proxy(self)
     implicit none
     class(field_{{kind}}_type), target, intent(in)  :: self
+    type(field_{{kind}}_type), pointer    :: sself
 
     ! Call the routine that initialises the proxy for data held in the parent
-    call self%field_parent_proxy_initialiser(get_proxy)
+    sself => self
+    call sself%field_parent_proxy_initialiser(get_proxy)
 
-    if (allocated(self%data))then
-      get_proxy%data => self%data
+    if (allocated(sself%data))then
+      get_proxy%data => sself%data
     else
       ! Fields can alternatively point to bespoke data
-      get_proxy%data => self%override_data
+      get_proxy%data => sself%override_data
     end if
 
   end function get_proxy
@@ -260,7 +282,7 @@ contains
 
     implicit none
 
-    class(field_{{kind}}_type), intent(inout)        :: self
+    class(field_{{kind}}_type), intent(inout), target        :: self
     type(function_space_type), pointer, intent(in) :: vector_space
     character(*), optional, intent(in)             :: name
     {{type}}({{kind}}), target, optional, intent(in)     :: override_data( : )
@@ -275,6 +297,8 @@ contains
     ! Depth of halo to allocate data array
     integer(i_def) :: field_halo_depth
 
+    type(field_{{kind}}_type), pointer    :: sself
+
     if ( present(name) ) then
       local_name = name
     else
@@ -295,7 +319,8 @@ contains
     ! re-initialisation
     call field_{{kind}}_destructor_scalar(self)
 
-    call self%field_parent_initialiser(vector_space, &
+    sself => self
+    call sself%field_parent_initialiser(vector_space, &
                                        name=local_name, &
                                        fortran_type={{type}}_type, &
                                        fortran_kind={{kind}}, &
@@ -622,18 +647,21 @@ contains
 
     implicit none
 
-    class(field_{{kind}}_type),   intent(in) :: this
+    class(field_{{kind}}_type),   intent(in), target :: this
     character(len=*), optional, intent(in) :: field_name
+    type(field_{{kind}}_type), pointer :: tthis
 
     character(str_def) :: name_used
+    type(field_{{kind}}_proxy_type) :: proxy
 
+    tthis => this
     if (present(field_name)) then
 
       name_used = field_name
 
     else
 
-      name_used = this%get_name()
+      name_used = tthis%get_name()
       if (name_used == name_none) &
         call log_event( 'Attempt to write field with undefined name', LOG_LEVEL_ERROR )
 
@@ -641,7 +669,8 @@ contains
 
     if (associated(this%write_method)) then
 
-      call this%write_method(trim(name_used), this%get_proxy())
+      call tthis%get_proxy2(proxy)
+      call tthis%write_method(name_used, proxy)
 
     else
 
diff --git a/lfric/infrastructure/source/key_value/key_value_collection_mod.f90 b/lfric/infrastructure/source/key_value/key_value_collection_mod.f90
index 324c466c..c8eec92b 100644
--- a/lfric/infrastructure/source/key_value/key_value_collection_mod.f90
+++ b/lfric/infrastructure/source/key_value/key_value_collection_mod.f90
@@ -178,7 +178,7 @@ subroutine create_key_value_object( self, key, value )
 
   instance => create_key_value( key, value )
   call self%add_key_value_object( instance )
-  deallocate( instance )
+  !deallocate( instance )
 
 end subroutine create_key_value_object
 
@@ -800,7 +800,7 @@ subroutine get_abstract_value(self, key, value)
     ! 'cast' to the data type
     select type(listitem => loop%payload)
       class is (abstract_key_value_type)
-      if ( trim(key) == trim(listitem%get_key()) ) then
+      if ( key == listitem%get_key() ) then
           value => listitem%value
           exit
       end if
@@ -867,7 +867,9 @@ function get_hash(self, key) result(hash)
   class(key_value_collection_type), intent(in) :: self
   character(*), intent(in) :: key
   integer(i_def) :: hash
-  hash = mod(sum_string(trim(key)),self%get_table_len())
+  character(len=100) :: key2
+  key2 = key
+  hash = mod(sum_string(trim(key2)),self%get_table_len())
 end function get_hash
 
 !> Clears all items from the collection
diff --git a/lfric/infrastructure/source/key_value/key_value_mod.f90 b/lfric/infrastructure/source/key_value/key_value_mod.f90
index 4abfbb8f..0a693548 100644
--- a/lfric/infrastructure/source/key_value/key_value_mod.f90
+++ b/lfric/infrastructure/source/key_value/key_value_mod.f90
@@ -48,7 +48,6 @@ module key_value_mod
   !=========================================
   type, abstract, extends(linked_list_data_type) :: key_value_type
 
-    private
     character(:), allocatable :: key
 
   contains
@@ -271,7 +270,8 @@ subroutine key_value_initialise( self, key )
         'Type already initialised as ' // trim(self%key)
     call log_event( log_scratch_space, LOG_LEVEL_ERROR )
   else
-    allocate( self%key, source=trim(key) )
+    !allocate( self%key, source=trim(key) )
+    self%key = key
   end if
 
   return
@@ -283,11 +283,12 @@ function get_key_value_key( self ) result( key )
 
   implicit none
 
-  class(key_value_type), intent(in) :: self
+  class(key_value_type), target, intent(in) :: self
 
-  character(:), allocatable :: key
+  character(:), pointer :: key
 
-  allocate( key, source=trim(self%key) )
+  !allocate( key, source=trim(self%key) )
+  key => self%key
 
   return
 end function get_key_value_key
diff --git a/lfric_apps/applications/gravity_wave/source/driver/gravity_wave_infrastructure_mod.f90 b/lfric_apps/applications/gravity_wave/source/driver/gravity_wave_infrastructure_mod.f90
index 672a462f..10ccfa13 100644
--- a/lfric_apps/applications/gravity_wave/source/driver/gravity_wave_infrastructure_mod.f90
+++ b/lfric_apps/applications/gravity_wave/source/driver/gravity_wave_infrastructure_mod.f90
@@ -204,7 +204,8 @@ contains
                     extrusion, stencil_depth,     &
                     apply_partition_check )
 
-    allocate( twod_names, source=base_mesh_names )
+    !allocate( twod_names, source=base_mesh_names )
+    twod_names = base_mesh_names
     do i=1, size(twod_names)
       twod_names(i) = trim(twod_names(i))//'_2d'
     end do
diff --git a/lfric_apps/applications/lfric_atm/build/fortran/nvfortran.mk b/lfric_apps/applications/lfric_atm/build/fortran/nvfortran.mk
new file mode 100644
index 00000000..d4a476c7
--- /dev/null
+++ b/lfric_apps/applications/lfric_atm/build/fortran/nvfortran.mk
@@ -0,0 +1,18 @@
+##############################################################################
+# (c) Crown copyright 2017 Met Office. All rights reserved.
+# The file LICENCE, distributed with this code, contains details of the terms
+# under which the code may be used.
+##############################################################################
+# Various things specific to the Portland Fortran compiler.
+##############################################################################
+
+$(info Project specials for Portland compiler)
+
+export FFLAGS_UM_PHYSICS = -r8
+
+# The lfric_atm app defines an extra set of debug flags for
+# fast-debug. For this compiler use the same as the full-debug
+# settings
+FFLAGS_FASTD_INIT         = $(FFLAGS_INIT) 
+FFLAGS_FASTD_RUNTIME      = $(FFLAGS_RUNTIME)
+
diff --git a/lfric_apps/applications/ngarch/build/fortran/nvfortran.mk b/lfric_apps/applications/ngarch/build/fortran/nvfortran.mk
new file mode 100644
index 00000000..e95afff3
--- /dev/null
+++ b/lfric_apps/applications/ngarch/build/fortran/nvfortran.mk
@@ -0,0 +1,17 @@
+##############################################################################
+# (c) Crown copyright 2017 Met Office. All rights reserved.
+# The file LICENCE, distributed with this code, contains details of the terms
+# under which the code may be used.
+##############################################################################
+# Various things specific to the Portland Fortran compiler.
+##############################################################################
+
+$(info Project specials for Portland compiler)
+
+export FFLAGS_UM_PHYSICS = -r8
+
+# The lfric_atm app defines an extra set of debug flags for
+# fast-debug. For this compiler use the same as the full-debug
+# settings
+FFLAGS_FASTD_INIT         = $(FFLAGS_INIT) 
+FFLAGS_FASTD_RUNTIME      = $(FFLAGS_RUNTIME)
diff --git a/lfric_apps/applications/shallow_water/source/driver/shallow_water_model_mod.F90 b/lfric_apps/applications/shallow_water/source/driver/shallow_water_model_mod.F90
index 670e2225..5c5aaaeb 100644
--- a/lfric_apps/applications/shallow_water/source/driver/shallow_water_model_mod.F90
+++ b/lfric_apps/applications/shallow_water/source/driver/shallow_water_model_mod.F90
@@ -189,7 +189,7 @@ module shallow_water_model_mod
                     stencil_depth, check_partitions )
 
 
-    allocate( twod_names, source=base_mesh_names )
+    twod_names = base_mesh_names
     do i=1, size(twod_names)
       twod_names(i) = trim(twod_names(i))//'_2d'
     end do
diff --git a/lfric_apps/applications/transport/source/driver/transport_driver_mod.f90 b/lfric_apps/applications/transport/source/driver/transport_driver_mod.f90
index 54507eec..4b3859c6 100644
--- a/lfric_apps/applications/transport/source/driver/transport_driver_mod.f90
+++ b/lfric_apps/applications/transport/source/driver/transport_driver_mod.f90
@@ -228,11 +228,12 @@ contains
 
     ! 1.1b Meshes the require a shifted extrusion
     ! ---------------------------------------------------------
-    allocate(meshes_to_shift,  source=base_mesh_names)
+    !allocate(meshes_to_shift,  source=base_mesh_names)
+    meshes_to_shift = base_mesh_names
 
     ! 1.1c Meshes that require a double-level extrusion
     ! ---------------------------------------------------------
-    allocate(meshes_to_double, source=base_mesh_names)
+    meshes_to_double = base_mesh_names
 
 
     !=======================================================================
@@ -255,7 +256,7 @@ contains
                                                   number_of_layers, &
                                                   PRIME_EXTRUSION ) )
 
-    allocate( twod_names, source=base_mesh_names )
+    twod_names = base_mesh_names
     do i=1, size(twod_names)
       twod_names(i) = trim(twod_names(i))//'_2d'
     end do
@@ -309,7 +310,7 @@ contains
     if (allocated(meshes_to_shift)) then
       if (size(meshes_to_shift) > 0) then
 
-        allocate( shifted_names, source=meshes_to_shift )
+        shifted_names = meshes_to_shift
         do i=1, size(shifted_names)
           shifted_names(i) = trim(shifted_names(i))//'_shifted'
         end do
@@ -326,7 +327,7 @@ contains
     if (allocated(meshes_to_double)) then
       if (size(meshes_to_double) > 0) then
 
-        allocate( double_names, source=meshes_to_double )
+        double_names = meshes_to_double
         do i=1, size(double_names)
           double_names(i) = trim(double_names(i))//'_double'
         end do
diff --git a/lfric_apps/build/extract/target-map.txt b/lfric_apps/build/extract/target-map.txt
index 1da724e6..036b4cf5 100644
--- a/lfric_apps/build/extract/target-map.txt
+++ b/lfric_apps/build/extract/target-map.txt
@@ -1,5 +1,7 @@
 generic-x86:  gfortran: meto-x86-gcc-ifort
 generic-x86:  ifort:    meto-x86-gcc-ifort
+generic-x86:  nvfortran:meto-x86-gcc-ifort
+generic-x86:  flang:    meto-x86-gcc-ifort
 meto-spice:   gfortran: meto-x86-gcc-ifort
 meto-spice:   ifort:    meto-x86-gcc-ifort
 meto-xc40:    crayftn:  meto-xc40-cce
diff --git a/lfric_apps/science/gungho/source/driver/gungho_model_mod.F90 b/lfric_apps/science/gungho/source/driver/gungho_model_mod.F90
index 0ffb6dde..f136b599 100644
--- a/lfric_apps/science/gungho/source/driver/gungho_model_mod.F90
+++ b/lfric_apps/science/gungho/source/driver/gungho_model_mod.F90
@@ -603,7 +603,8 @@ contains
                     apply_partition_check )
 
 
-    allocate( twod_names, source=base_mesh_names )
+    !allocate( twod_names, source=base_mesh_names )
+    twod_names = base_mesh_names
     do i=1, size(twod_names)
       twod_names(i) = trim(twod_names(i))//'_2d'
     end do
@@ -617,7 +618,8 @@ contains
     if (allocated(meshes_to_shift)) then
       if (size(meshes_to_shift) > 0) then
 
-        allocate( shifted_names, source=meshes_to_shift )
+        !allocate( shifted_names, source=meshes_to_shift )
+        shifted_names = meshes_to_shift
         do i=1, size(shifted_names)
           shifted_names(i) = trim(shifted_names(i))//'_shifted'
         end do
@@ -634,7 +636,8 @@ contains
     if (allocated(meshes_to_double)) then
       if (size(meshes_to_double) > 0) then
 
-        allocate( double_names, source=meshes_to_double )
+        !allocate( double_names, source=meshes_to_double )
+        double_names = meshes_to_double
         do i=1, size(double_names)
           double_names(i) = trim(double_names(i))//'_double'
         end do
diff --git a/lfric_apps/science/um_physics_interface/source/psy/psykal_lite_phys_mod.F90 b/lfric_apps/science/um_physics_interface/source/psy/psykal_lite_phys_mod.F90
index ef6d8f4b..a8167ff2 100644
--- a/lfric_apps/science/um_physics_interface/source/psy/psykal_lite_phys_mod.F90
+++ b/lfric_apps/science/um_physics_interface/source/psy/psykal_lite_phys_mod.F90
@@ -216,7 +216,7 @@ contains
   ! Add arrays my_coeff_rad & my_phi_stph by hand
   real(kind=r_def), intent(in), dimension(:,:) :: coeffc_phase
   real(kind=r_def), intent(in), dimension(:,:) :: coeffs_phase
-  integer(kind=i_def), parameter :: nranks_array = rank(coeffc_phase)
+  integer(kind=i_def), parameter :: nranks_array = 2
   integer(kind=i_def), dimension(nranks_array) :: dims_array
 
   ! Get the upper bound for each rank of each scalar array
